<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
          http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

	<!-- import  -->
	<import resource="common/data-source-context.xml" />
	<import resource="jobs/partitonFilejob.xml" />
	
	<!--###################### JOB standardJob ####################-->
    <batch:job id="standardJob">
        <batch:step id="standardJob-Step">
            <batch:tasklet>
                <batch:chunk reader="customCamelReader" processor="customCamelItemProcessor" writer="customCamelItemWriter"  commit-interval="3"/>
                <!-- <batch:chunk reader="customCamelFileReader" processor="customCamelItemFileProcessor"  writer="customCamelItemFileWriter" commit-interval="3" /> -->
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="camelJobExecutionListener"/>
        </batch:listeners>
    </batch:job>
    
    <!--###################### JOB partitinnerJob ####################-->
	<job id="partitinnerJob" xmlns="http://www.springframework.org/schema/batch">
	    <step id="partitinnerJob-master.Step">
	        <partition step="partitinnerJob-slave.Step" partitioner="myPartitioner">
	            <handler grid-size="4" task-executor="myTaskExecutor"/>
	        </partition>
	    </step>
	</job>
	
	<step id="partitinnerJob-slave.Step" xmlns="http://www.springframework.org/schema/batch">
	    <tasklet >
	    
	        <chunk  reader="customCamelItemFileReceiveReader"  processor="customCamelItemProcessor"  writer="customCamelItemFileWriter" commit-interval="1" />
	        <!-- <chunk  reader="customCamelItemFileReceiveReader"  processor="customCamelItemProcessor"  writer="flatFileItemWriter" commit-interval="1" /> -->
	    </tasklet>
	</step>

    <!--###################### Camel infrastructure ####################-->
	<camel:consumerTemplate id="consumerTemplate" camelContextId="camel"/>
    <camel:template         id="template"         camelContextId="camel"/>
    <camel:camelContext id="camel">
		<!-- <camel:route>
			<camel:from uri="timer://sedaStart?repeatCount=3" />
			<camel:setBody><camel:simple> new String[]{"foo", "bar", "baz", null}</camel:simple></camel:setBody>
			<camel:to uri="seda:inputQueue"/>
		</camel:route> -->
    
        <camel:route>
            <camel:from uri="direct:start"/>
            <camel:to uri="spring-batch:standardJob"/>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:partitionJob"/>
            <camel:to uri="spring-batch:partitionJob"/>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:large-file-batch-start"/>
            <camel:to uri="spring-batch:partitinnerJob"/>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:processor"/>
            <camel:setExchangePattern pattern="InOut"/>
            <camel:setBody>
                <camel:simple>Echo ${body}</camel:simple>
            </camel:setBody>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:file-processor"/>
            <camel:to   uri="file:receiveFileComplete?fileName=MyFile.txt"/>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:header"/>
            <camel:to uri="spring-batch:standardJob"/>
            <camel:to uri="mock:header"/>
        </camel:route>

        <!-- Timer Sample  -->
        <!-- <camel:route>
		    <camel:from uri="timer://foo?fixedRate=true&amp;period=600"/>
		    <camel:setBody><camel:simple>abcdcde</camel:simple></camel:setBody>
		    <camel:to uri="stream:out"/>
		    <camel:to uri="seda:inputQueue"/>
		</camel:route> -->

		<!-- File Sample  -->
        <!-- <camel:route>
		    <camel:from uri="file://C:/in/?fileName=MyFile.txt"/>
		    <camel:from uri="file:receiveFile?fileName=MyFile.txt"/>
		    <camel:to   uri="file:receiveFileComplete?fileName=MyFile.txt"/>
		</camel:route> -->
		
		<!-- init start dsl  -->
		<!-- <camel:route>
			<camel:from uri="timer://initStart?repeatCount=1" />
			<camel:to uri="direct:start"/>
		</camel:route> --> 
    </camel:camelContext>

    <!--###################### Spring Batch infrastructure ####################-->
	<bean id="myTaskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry"/>
	</bean>

	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
		p:dataSource-ref="dataSource" p:transactionManager-ref="transactionManager" p:databaseType="hsql" />

	<bean id="mapJobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"
		lazy-init="true" autowire-candidate="false" />

	<bean id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator"
		p:jobLauncher-ref="jobLauncher"     p:jobExplorer-ref="jobExplorer"
		p:jobRepository-ref="jobRepository" p:jobRegistry-ref="jobRegistry" />

	<bean id="jobExplorer"
		class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
		p:dataSource-ref="dataSource" />

	<bean id="jobRegistry"
		class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--###################### Reader ####################-->
    <bean id="customCamelReader" class="org.apache.camel.component.spring.batch.support.CustomCamelItemReader">
        <constructor-arg ref="consumerTemplate"/>
        <constructor-arg value="seda:inputQueue"/>
    </bean>
    
    <bean id="customCamelFileReader" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileReader">
        <constructor-arg ref="consumerTemplate"/>
        <constructor-arg value="file://receiveFile?noop=true"/>
         
        <!-- <constructor-arg value="file:receiveFile?fileName=MyFile.txt"/> -->
    </bean>
    
    <bean id="customCamelItemFileReceiveReader" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileReceiveReader">
        <constructor-arg ref="consumerTemplate"/>
        <constructor-arg value="file:receiveFile?noop=true"/>
    </bean>

	<!--###################### Writer ####################-->
    <bean id="customCamelItemWriter" class="org.apache.camel.component.spring.batch.support.CustomCamelItemWriter">
        <constructor-arg ref="template"/>
        <constructor-arg value="mock:output"/>
    </bean>
    <bean id="customCamelItemFileWriter" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileWriter">
        <constructor-arg ref="template"/>
        <constructor-arg value="mock:output"/>
    </bean>    
    
    <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="file:csv/output/person.data#{stepExecutionContext[startingIndex]}-#{stepExecutionContext[endingIndex]}.csv"/>
        
        <property name="appendAllowed" value="false"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=","/>
                <!-- <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="firstName, lastName, city" />
                    </bean>
                </property> -->
            </bean>
        </property>
    </bean>

	<!--###################### Process ####################-->
    <bean id="customCamelItemProcessor" class="org.apache.camel.component.spring.batch.support.CustomCamelItemProcessor">
        <constructor-arg ref="template"/>
        <constructor-arg value="direct:processor"/>
    </bean>
    <bean id="customCamelItemFileProcessor" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileProcessor">
        <constructor-arg ref="template"/>
        <constructor-arg value="direct:file-processor"/>
    </bean>

	<!--###################### Listener ####################-->
    <bean id="camelJobExecutionListener"
          class="org.apache.camel.component.spring.batch.support.CamelJobExecutionListener">
        <constructor-arg ref="template"/>
        <constructor-arg value="mock:jobExecutionEventsQueue"/>
    </bean>
    
    <!--###################### partitioner ####################-->
    <bean id="myPartitioner" class="org.apache.camel.component.spring.batch.partitioner.CustomPartitioner" scope="step" />
</beans>
