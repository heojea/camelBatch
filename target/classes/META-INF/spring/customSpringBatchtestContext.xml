<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
          http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

	<!-- import  -->
	<import resource="common/data-source-context.xml" />
	
    <!-- Spring Batch task -->
	<!-- 단일 대상 처리 프로세서 -->
    <batch:job id="echoJob">
        <batch:step id="echoStep">
            <batch:tasklet>
                <batch:chunk reader="customCamelReader" writer="customCamelItemWriter" processor="customCamelItemProcessor" commit-interval="3"/>
                <!-- <batch:chunk reader="customCamelFileReader" processor="customCamelItemFileProcessor"  writer="customCamelItemFileWriter" commit-interval="3" /> -->
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="camelJobExecutionListener"/>
        </batch:listeners>
    </batch:job>
    
	    
	<!-- 대용량 처리(FILE)   -->	
	<batch:job id="myJob" job-repository="jobRepository" >
	    <batch:step id="master.Step">
	        <batch:partition step="slave.Step" partitioner="myPartitioner">
	            <batch:handler grid-size="4" task-executor="myTaskExecutor"/>
	        </batch:partition>
	    </batch:step>
	</batch:job>
	
	<batch:step id="slave.Step" job-repository="jobRepository">
	    <batch:tasklet >
	        <batch:chunk  reader="customCamelItemFileFlatReader" writer="flatFileItemWriter" commit-interval="1" />
	    </batch:tasklet>
	</batch:step>

    <!-- Camel infrastructure -->

    <camel:camelContext id="camel">
        <camel:route>
            <camel:from uri="direct:start"/>
            <camel:to uri="spring-batch:echoJob"/>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:large-file-batch-start"/>
            <camel:to uri="spring-batch:myJob"/>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:processor"/>
            <camel:setExchangePattern pattern="InOut"/>
            <camel:setBody>
                <camel:simple>Echo ${body}</camel:simple>
            </camel:setBody>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:file-processor"/>
            <camel:to   uri="file:receiveFileComplete?fileName=MyFile.txt"/>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:header"/>
            <camel:to uri="spring-batch:echoJob"/>
            <camel:to uri="mock:header"/>
        </camel:route>
        
        <!-- Timer Sample  -->
        <!-- <camel:route>
		    <camel:from uri="timer://foo?fixedRate=true&amp;period=600"/>
		    <camel:setBody><camel:simple>abcdcde</camel:simple></camel:setBody>
		    <camel:to uri="stream:out"/>
		    <camel:to uri="seda:inputQueue"/>
		</camel:route> -->

		<!-- File Sample  -->
        <!-- <camel:route>
		    <camel:from uri="file://C:/in/?fileName=MyFile.txt"/>
		    <camel:from uri="file:receiveFile?fileName=MyFile.txt"/>
		    <camel:to   uri="file:receiveFileComplete?fileName=MyFile.txt"/>
		    
		</camel:route> -->
    </camel:camelContext>

    <camel:consumerTemplate id="consumerTemplate" camelContextId="camel"/>
    <camel:template         id="template"         camelContextId="camel"/>

    <!-- Spring Batch infrastructure -->
	<bean id="myTaskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry"/>
	</bean>

	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
		p:dataSource-ref="dataSource" p:transactionManager-ref="transactionManager" p:tablePrefix="BATCH_" p:maxVarCharLength="1000" />

	<bean id="mapJobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"
		lazy-init="true" autowire-candidate="false" />

	<bean id="jobOperator"
		class="org.springframework.batch.core.launch.support.SimpleJobOperator"
		p:jobLauncher-ref="jobLauncher" p:jobExplorer-ref="jobExplorer"
		p:jobRepository-ref="jobRepository" p:jobRegistry-ref="jobRegistry" />

	<bean id="jobExplorer"
		class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
		p:dataSource-ref="dataSource" />

	<bean id="jobRegistry"
		class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- <aop:config>
	    <aop:advisor pointcut="execution(* org.springframework.batch.core..*Repository+.*(..))" 
	                 advice-ref="txAdvice"/>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
	        <tx:method name="*"/>
	    </tx:attributes>
	</tx:advice> -->
	
	<!-- Reader -->
    <bean id="customCamelReader" class="org.apache.camel.component.spring.batch.support.CustomCamelItemReader">
        <constructor-arg ref="consumerTemplate"/>
        <constructor-arg value="seda:inputQueue"/>
    </bean>
    
    <bean id="customCamelFileReader" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileReader">
        <constructor-arg ref="consumerTemplate"/>
        <constructor-arg value="file:receiveFile?fileName=MyFile.txt"/>
    </bean>
    
    <bean id="customCamelItemFileFlatReader" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileFlatReader">
        <constructor-arg ref="consumerTemplate"/>
        <constructor-arg value="file:receiveFile?fileName=MyFile.txt"/>
    </bean>

	<!-- Writer  -->
    <bean id="customCamelItemWriter" class="org.apache.camel.component.spring.batch.support.CustomCamelItemWriter">
        <constructor-arg ref="template"/>
        <constructor-arg value="mock:output"/>
    </bean>
    <bean id="customCamelItemFileWriter" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileWriter">
        <constructor-arg ref="template"/>
        <constructor-arg value="mock:output"/>
    </bean>    
    
    <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="file:csv/output/person.data#{stepExecutionContext[startingIndex]}-#{stepExecutionContext[endingIndex]}.csv"/>
        <property name="appendAllowed" value="false"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=","/>
                <!-- <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="firstName, lastName, city" />
                    </bean>
                </property> -->
            </bean>
        </property>
    </bean>

	<!-- Process -->
    <bean id="customCamelItemProcessor" class="org.apache.camel.component.spring.batch.support.CustomCamelItemProcessor">
        <constructor-arg ref="template"/>
        <constructor-arg value="direct:processor"/>
    </bean>
    <bean id="customCamelItemFileProcessor" class="org.apache.camel.component.spring.batch.support.CustomCamelItemFileProcessor">
        <constructor-arg ref="template"/>
        <constructor-arg value="direct:file-processor"/>
    </bean>

	<!-- Listener  -->
    <bean id="camelJobExecutionListener"
          class="org.apache.camel.component.spring.batch.support.CamelJobExecutionListener">
        <constructor-arg ref="template"/>
        <constructor-arg value="mock:jobExecutionEventsQueue"/>
    </bean>
    
    <!-- partitioner -->
    <bean id="myPartitioner" class="org.apache.camel.component.spring.batch.partitioner.CustomPartitioner" />
</beans>
